[Test]
[Description("Job_ShouldBePickedUp_WhenStatusIsSetToNew_And_RunSuccessfully")]
public void Job_ShouldBePickedUp_WhenStatusIsSetToNew_And_RunSuccessfully()
{
	int? testWorkspaceArtifactId = null;
	int? testUserArtifactId = null;
	int? testGroupArtifactId = null;
	int? jobArtifactId = null;

	try
	{
		// ARRANGE
		Console.WriteLine("Start - ARRANGE");

		//Get metrics before the job is run
		int numberOfWorkspacesBeforeJobRun = Helpers.RsapiHelper.QueryNumberOfWorkspaces(_servicesManager);
		Console.WriteLine($"{nameof(numberOfWorkspacesBeforeJobRun)}= {numberOfWorkspacesBeforeJobRun}");
		int numberOfUsersBeforeJobRun = Helpers.RsapiHelper.QueryNumberOfUsers(_servicesManager);
		Console.WriteLine($"{nameof(numberOfUsersBeforeJobRun)}= {numberOfUsersBeforeJobRun}");
		int numberOfGroupsBeforeJobRun = Helpers.RsapiHelper.QueryNumberOfGroups(_servicesManager);
		Console.WriteLine($"{nameof(numberOfGroupsBeforeJobRun)}= {numberOfGroupsBeforeJobRun}");

		//Create Test Workspace
		testWorkspaceArtifactId = CreateWorkspace($"Test_{Guid.NewGuid()}");
		Console.WriteLine($"{nameof(testWorkspaceArtifactId)}= {testWorkspaceArtifactId}");

		//Create Test User
		testUserArtifactId = CreateUser();
		Console.WriteLine($"{nameof(testUserArtifactId)}= {testUserArtifactId}");

		//Create Test Group
		testGroupArtifactId = CreateGroup($"Group_{Guid.NewGuid()}");
		Console.WriteLine($"{nameof(testGroupArtifactId)}= {testGroupArtifactId}");

		Console.WriteLine("End - ARRANGE");

		// ACT
		Console.WriteLine("Start - ACT");

		//Create job
		jobArtifactId = CreateJob(jobStatus: Helpers.Constants.JobStatus.NEW);
		Console.WriteLine($"{nameof(jobArtifactId)}= {jobArtifactId}");

		//Check if job has run
		string jobStatus = string.Empty;
		const int timeOutPeriod = 300; // 5 min
		int currentWaitTime = 0; // 0 secs
		int attempt = 1;
		while (currentWaitTime <= timeOutPeriod)
		{
			Console.WriteLine($"{nameof(attempt)}= {attempt}");

			//Check job status
			jobStatus = RetrieveJobStatus(jobArtifactId.Value);
			Console.WriteLine($"{nameof(jobStatus)}= {jobStatus}");

			if (jobStatus.Equals(Helpers.Constants.JobStatus.COMPLETED))
			{
				break;
			}

			Thread.Sleep(5000); // 5 secs
			currentWaitTime += 30;
			attempt++;
		}
		int numberOfWorkspacesAfterJobRun = Helpers.RsapiHelper.QueryNumberOfWorkspaces(_servicesManager);
		Console.WriteLine($"{nameof(numberOfWorkspacesAfterJobRun)}= {numberOfWorkspacesAfterJobRun}");
		int numberOfUsersAfterJobRun = Helpers.RsapiHelper.QueryNumberOfUsers(_servicesManager);
		Console.WriteLine($"{nameof(numberOfUsersAfterJobRun)}= {numberOfUsersAfterJobRun}");
		int numberOfGroupsAfterJobRun = Helpers.RsapiHelper.QueryNumberOfGroups(_servicesManager);
		Console.WriteLine($"{nameof(numberOfGroupsAfterJobRun)}= {numberOfGroupsAfterJobRun}");

		Console.WriteLine("End - ACT");

		// ASSERT
		Console.WriteLine("Start - ASSERT");
		Assert.That(jobStatus, Is.EqualTo(Helpers.Constants.JobStatus.COMPLETED));
		Assert.That(numberOfWorkspacesAfterJobRun, Is.EqualTo(numberOfWorkspacesBeforeJobRun + 1));
		Assert.That(numberOfUsersAfterJobRun, Is.EqualTo(numberOfUsersBeforeJobRun + 1));
		Assert.That(numberOfGroupsAfterJobRun, Is.EqualTo(numberOfGroupsBeforeJobRun + 1));
		Console.WriteLine("End - ASSERT");
	}
	finally
	{
		Console.WriteLine("Start - Clean up");

		//Clean up
		//DeleteWorkspace(testWorkspaceArtifactId);
		DeleteUser(testUserArtifactId);
		DeleteGroup(testGroupArtifactId);
		DeleteJob(jobArtifactId);

		Console.WriteLine("End - Clean up");
	}
}

private int CreateUser()
{
	Console.WriteLine("Start - Creating User.");

	try
	{
		Console.WriteLine("Creating new User.");
		int userArtifactId = UserUtility.CreateUserUsingRepository(_rsapiClient);
		if (userArtifactId < 1)
		{
			throw new Exception("An error occured when creating a new User. Rsapi.");
		}

		return userArtifactId;
	}
	catch (Exception ex)
	{
		throw new Exception("An error occured when creating a new User", ex);
	}
	finally
	{
		Console.WriteLine("End - Creating User.");
	}
}

private bool DoesUserExists(int userArtifactId)
{
	Console.WriteLine("Start - Checking if User exists.");

	using (IRSAPIClient rsapiClient = _serviceFactory.CreateProxy<IRSAPIClient>())
	{
		rsapiClient.APIOptions.WorkspaceID = -1;

		try
		{
			rsapiClient.Repositories.User.ReadSingle(userArtifactId);
			return true;
		}
		catch (Exception)
		{
			return false;
		}
		finally
		{
			Console.WriteLine("End - Checking if User exists.");
		}
	}
}

private void DeleteUser(int? userArtifactId)
{
	Console.WriteLine("Start - Deleting User.");

	if (userArtifactId != null)
	{
		if (DoesUserExists(userArtifactId.Value))
		{
			try
			{
				Console.WriteLine("Deleting User.");
				Relativity.Test.Helpers.UserHelpers.DeleteUser.Delete_User(_rsapiClient, userArtifactId.Value);
				Console.WriteLine("User Deleted.");
			}
			catch (Exception ex)
			{
				throw new Exception("An error occured when deleting a User", ex);
			}
		}
	}

	Console.WriteLine("End - Deleting User.");
}

private int CreateGroup(string groupName)
{
	Console.WriteLine("Start - Creating Group.");

	try
	{
		Console.WriteLine("Creating new Group.");
		int groupArtifactId = Relativity.Test.Helpers.GroupHelpers.CreateGroup.Create_Group(_rsapiClient, groupName);
		Console.WriteLine("New Group Created.");
		return groupArtifactId;
	}
	catch (Exception ex)
	{
		throw new Exception("An error occured when creating a new Group", ex);
	}
	finally
	{
		Console.WriteLine("End - Creating Group.");
	}
}

private bool DoesGroupExists(int groupArtifactId)
{
	Console.WriteLine("Start - Checking if Group exists.");

	using (IRSAPIClient rsapiClient = _serviceFactory.CreateProxy<IRSAPIClient>())
	{
		rsapiClient.APIOptions.WorkspaceID = -1;

		try
		{
			rsapiClient.Repositories.Group.ReadSingle(groupArtifactId);
			return true;
		}
		catch (Exception)
		{
			return false;
		}
		finally
		{
			Console.WriteLine("End - Checking if Group exists.");
		}
	}
}

private void DeleteGroup(int? groupArtifactId)
{
	Console.WriteLine("Start - Deleting Group.");

	if (groupArtifactId != null)
	{
		if (DoesGroupExists(groupArtifactId.Value))
		{
			try
			{
				Console.WriteLine("Deleting Group.");
				Relativity.Test.Helpers.GroupHelpers.DeleteGroup.Delete_Group(_rsapiClient, groupArtifactId.Value);
				Console.WriteLine("Group Deleted.");
			}
			catch (Exception ex)
			{
				throw new Exception("An error occured when deleting a Group", ex);
			}
		}
	}

	Console.WriteLine("End - Deleting Group.");
}

private int CreateJob(string jobStatus)
{
	Console.WriteLine("Start - Creating Job.");

	try
	{
		using (IRSAPIClient rsapiClient = _serviceFactory.CreateProxy<IRSAPIClient>())
		{
			rsapiClient.APIOptions.WorkspaceID = _workspaceArtifactId;
			string jobName = $"Job_{Guid.NewGuid()}";
			MultiChoiceFieldValueList multiChoices = new MultiChoiceFieldValueList(
				new kCura.Relativity.Client.DTOs.Choice(Helpers.Constants.Guids.Choices.InstanceMetricsJob.Metrics_Workspaces),
				new kCura.Relativity.Client.DTOs.Choice(Helpers.Constants.Guids.Choices.InstanceMetricsJob.Metrics_Users),
				new kCura.Relativity.Client.DTOs.Choice(Helpers.Constants.Guids.Choices.InstanceMetricsJob.Metrics_Groups))
			{
				UpdateBehavior = MultiChoiceUpdateBehavior.Replace
			};

			RDO jobRdo = new RDO
			{
				ArtifactTypeGuids = new List<Guid> { Helpers.Constants.Guids.ObjectType.InstanceMetricsJob },
				Fields = new List<FieldValue>
				{
					new FieldValue(Helpers.Constants.Guids.Fields.InstanceMetricsJob.Name_FixedLengthText, jobName),
					new FieldValue(Helpers.Constants.Guids.Fields.InstanceMetricsJob.Status_LongText, jobStatus),
					new FieldValue(Helpers.Constants.Guids.Fields.InstanceMetricsJob.Metrics_MultipleChoice, multiChoices)
				}
			};

			try
			{
				int jobArtifactId = rsapiClient.Repositories.RDO.CreateSingle(jobRdo);
				return jobArtifactId;
			}
			catch (Exception ex)
			{
				throw new Exception("An error occured when creating a job. CreateSingle.", ex);
			}
		}
	}
	catch (Exception ex)
	{
		throw new Exception("An error occured when creating a job.", ex);
	}
	finally
	{
		Console.WriteLine("End - Creating Job.");
	}
}

private bool DoesJobExists(int jobArtifactId)
{
	Console.WriteLine("Start - Checking if Job exists.");

	using (IRSAPIClient rsapiClient = _serviceFactory.CreateProxy<IRSAPIClient>())
	{
		rsapiClient.APIOptions.WorkspaceID = _workspaceArtifactId;

		try
		{
			rsapiClient.Repositories.RDO.ReadSingle(jobArtifactId);
			return true;
		}
		catch (Exception)
		{
			return false;
		}
		finally
		{
			Console.WriteLine("End - Checking if Job exists.");
		}
	}
}

private void DeleteJob(int? jobArtifactId)
{
	Console.WriteLine("Start - Deleting Job.");

	if (jobArtifactId != null)
	{
		if (DoesJobExists(jobArtifactId.Value))
		{
			try
			{
				using (IRSAPIClient rsapiClient = _serviceFactory.CreateProxy<IRSAPIClient>())
				{
					rsapiClient.APIOptions.WorkspaceID = _workspaceArtifactId;
					try
					{
						rsapiClient.Repositories.RDO.DeleteSingle(jobArtifactId.Value);
					}
					catch (Exception ex)
					{
						throw new Exception("An error occured when deleting a job. DeleteSingle.", ex);
					}
				}
			}
			catch (Exception ex)
			{
				throw new Exception("An error occured when deleting a job.", ex);
			}
		}
	}

	Console.WriteLine("End - Deleting Job.");
}

private string RetrieveJobStatus(int jobArtifactId)
{
	Console.WriteLine("Start - Retrieving Job Status.");

	try
	{
		using (IRSAPIClient rsapiClient = _serviceFactory.CreateProxy<IRSAPIClient>())
		{
			rsapiClient.APIOptions.WorkspaceID = _workspaceArtifactId;
			RDO jobRdo;
			try
			{
				jobRdo = rsapiClient.Repositories.RDO.ReadSingle(jobArtifactId);
			}
			catch (Exception ex)
			{
				throw new Exception("An error occured when retrieving job status. ReadSingle.", ex);
			}

			string jobStatus = jobRdo.Fields.Get(Helpers.Constants.Guids.Fields.InstanceMetricsJob.Status_LongText).ValueAsLongText;
			return jobStatus;
		}
	}
	catch (Exception ex)
	{
		throw new Exception("An error occured when retrieving job status.", ex);
	}
	finally
	{
		Console.WriteLine("End - Retrieving Job Status.");
	}
}